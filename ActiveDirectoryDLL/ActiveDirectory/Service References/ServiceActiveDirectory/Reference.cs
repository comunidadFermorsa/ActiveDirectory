//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ActiveDirectory.ServiceActiveDirectory {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
    [System.SerializableAttribute()]
    public partial class FaultExceptionActive : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string detailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string detail {
            get {
                return this.detailField;
            }
            set {
                if ((object.ReferenceEquals(this.detailField, value) != true)) {
                    this.detailField = value;
                    this.RaisePropertyChanged("detail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceActiveDirectory.IActiveDirectory")]
    public interface IActiveDirectory {
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/ExistsNipEmployee", ReplyAction="http://tempuri.org/IActiveDirectory/ExistsNipEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/ExistsNipEmployeeFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ExistsNipEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/InsertNipEmployee", ReplyAction="http://tempuri.org/IActiveDirectory/InsertNipEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/InsertNipEmployeeFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo InsertNipEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/GetNumberEmployee", ReplyAction="http://tempuri.org/IActiveDirectory/GetNumberEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/GetNumberEmployeeFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo GetNumberEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/ExistsEmployee", ReplyAction="http://tempuri.org/IActiveDirectory/ExistsEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/ExistsEmployeeFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ExistsEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/UnlockEmployee", ReplyAction="http://tempuri.org/IActiveDirectory/UnlockEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/UnlockEmployeeFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo UnlockEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/AuthenticateEmployee", ReplyAction="http://tempuri.org/IActiveDirectory/AuthenticateEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/AuthenticateEmployeeFaultExceptionActiveFault" +
            "", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo AuthenticateEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/ExistsEmployeeCf", ReplyAction="http://tempuri.org/IActiveDirectory/ExistsEmployeeCfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/ExistsEmployeeCfFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ExistsEmployeeCf(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/InsertEmployeeCf", ReplyAction="http://tempuri.org/IActiveDirectory/InsertEmployeeCfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/InsertEmployeeCfFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo InsertEmployeeCf(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/UpdateEmployeeCf", ReplyAction="http://tempuri.org/IActiveDirectory/UpdateEmployeeCfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/UpdateEmployeeCfFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo UpdateEmployeeCf(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (https://ActiveDirectory/Operations) of message ActiveDirectoryRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectory/LicenseKey", ReplyAction="http://tempuri.org/IActiveDirectory/LicenseKeyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ActiveDirectory.ServiceActiveDirectory.FaultExceptionActive), Action="http://tempuri.org/IActiveDirectory/LicenseKeyFaultExceptionActiveFault", Name="FaultExceptionActive", Namespace="http://schemas.datacontract.org/2004/07/ActiveDirectory")]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo LicenseKey(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ActiveDirectoryRequest", WrapperNamespace="https://ActiveDirectory/Operations", IsWrapped=true)]
    public partial class ActiveDirectoryRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ActiveDirectory/Operations")]
        public string domainActDir;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ActiveDirectory/Operations")]
        public string password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ActiveDirectory/Operations")]
        public string passwordActDir;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ActiveDirectory/Operations")]
        public string pathActDir;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ActiveDirectory/Operations")]
        public string userService;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ActiveDirectory/Operations")]
        public string usernameActDir;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=0)]
        public string userAuthenticate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=1)]
        public string passwordAuthenticate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=2)]
        public string numberEmployee;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=3)]
        public string nip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=4)]
        public string confirmNip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=5)]
        public int flag;
        
        public ActiveDirectoryRequest() {
        }
        
        public ActiveDirectoryRequest(string domainActDir, string password, string passwordActDir, string pathActDir, string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, string numberEmployee, string nip, string confirmNip, int flag) {
            this.domainActDir = domainActDir;
            this.password = password;
            this.passwordActDir = passwordActDir;
            this.pathActDir = pathActDir;
            this.userService = userService;
            this.usernameActDir = usernameActDir;
            this.userAuthenticate = userAuthenticate;
            this.passwordAuthenticate = passwordAuthenticate;
            this.numberEmployee = numberEmployee;
            this.nip = nip;
            this.confirmNip = confirmNip;
            this.flag = flag;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ActiveDirectoryInfoObject", WrapperNamespace="https://ActiveDirectory/Operations", IsWrapped=true)]
    public partial class ActiveDirectoryInfo {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=0)]
        public string userService;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=1)]
        public string numberEmployee;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=2)]
        public string nip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=3)]
        public string confirmNip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=4)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=5)]
        public string code;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ActiveDirectory/Operations", Order=6)]
        public string result;
        
        public ActiveDirectoryInfo() {
        }
        
        public ActiveDirectoryInfo(string userService, string numberEmployee, string nip, string confirmNip, string name, string code, string result) {
            this.userService = userService;
            this.numberEmployee = numberEmployee;
            this.nip = nip;
            this.confirmNip = confirmNip;
            this.name = name;
            this.code = code;
            this.result = result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActiveDirectoryChannel : ActiveDirectory.ServiceActiveDirectory.IActiveDirectory, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActiveDirectoryClient : System.ServiceModel.ClientBase<ActiveDirectory.ServiceActiveDirectory.IActiveDirectory>, ActiveDirectory.ServiceActiveDirectory.IActiveDirectory {
        
        public ActiveDirectoryClient() {
        }
        
        public ActiveDirectoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActiveDirectoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActiveDirectoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActiveDirectoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.ExistsNipEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.ExistsNipEmployee(request);
        }
        
        public string ExistsNipEmployee(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).ExistsNipEmployee(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.InsertNipEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.InsertNipEmployee(request);
        }
        
        public string InsertNipEmployee(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).InsertNipEmployee(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.GetNumberEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.GetNumberEmployee(request);
        }
        
        public string GetNumberEmployee(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).GetNumberEmployee(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.ExistsEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.ExistsEmployee(request);
        }
        
        public string ExistsEmployee(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).ExistsEmployee(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.UnlockEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.UnlockEmployee(request);
        }
        
        public string UnlockEmployee(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).UnlockEmployee(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.AuthenticateEmployee(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.AuthenticateEmployee(request);
        }
        
        public string AuthenticateEmployee(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).AuthenticateEmployee(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.ExistsEmployeeCf(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.ExistsEmployeeCf(request);
        }
        
        public string ExistsEmployeeCf(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).ExistsEmployeeCf(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.InsertEmployeeCf(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.InsertEmployeeCf(request);
        }
        
        public string InsertEmployeeCf(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).InsertEmployeeCf(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.UpdateEmployeeCf(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.UpdateEmployeeCf(request);
        }
        
        public string UpdateEmployeeCf(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).UpdateEmployeeCf(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo ActiveDirectory.ServiceActiveDirectory.IActiveDirectory.LicenseKey(ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest request) {
            return base.Channel.LicenseKey(request);
        }
        
        public string LicenseKey(string domainActDir, string password, string passwordActDir, string pathActDir, ref string userService, string usernameActDir, string userAuthenticate, string passwordAuthenticate, ref string numberEmployee, ref string nip, ref string confirmNip, int flag, out string code, out string result) {
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest inValue = new ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryRequest();
            inValue.domainActDir = domainActDir;
            inValue.password = password;
            inValue.passwordActDir = passwordActDir;
            inValue.pathActDir = pathActDir;
            inValue.userService = userService;
            inValue.usernameActDir = usernameActDir;
            inValue.userAuthenticate = userAuthenticate;
            inValue.passwordAuthenticate = passwordAuthenticate;
            inValue.numberEmployee = numberEmployee;
            inValue.nip = nip;
            inValue.confirmNip = confirmNip;
            inValue.flag = flag;
            ActiveDirectory.ServiceActiveDirectory.ActiveDirectoryInfo retVal = ((ActiveDirectory.ServiceActiveDirectory.IActiveDirectory)(this)).LicenseKey(inValue);
            userService = retVal.userService;
            numberEmployee = retVal.numberEmployee;
            nip = retVal.nip;
            confirmNip = retVal.confirmNip;
            code = retVal.code;
            result = retVal.result;
            return retVal.name;
        }
    }
}
